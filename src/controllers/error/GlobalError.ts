import { NextFunction, Request, Response } from "express";
import AppError from "../../utils/error/AppError";
import logger from "../../utils/logger";

// H√†m x·ª≠ l√Ω l·ªói Zod (validation l·ªói t·ª´ th∆∞ vi·ªán Zod)
const handleZodError = (err: AppError) => {
  logger.warn(`Validation error occurred: ${err.message}`); // Ghi l·∫°i l·ªói validation t·ª´ Zod
  let tmpErr = Object.values(err)[0].map((e: any) => ({
    message: e.message,
    path: e.path[0],
  }));

  return new AppError("Validation failed for one or more fields", 400, tmpErr);
};

const handleError23505 = (err: AppError) => {
  logger.error(`PostgreSQL error 23505: ${err.message}`); // Ghi log l·ªói vi ph·∫°m kh√≥a duy nh·∫•t
  return new AppError(err.message, 400);
};

const handleError23502 = (err: AppError) => {
  logger.error(`PostgreSQL error 23502: ${err.message}`); // Ghi log l·ªói thi·∫øu gi√° tr·ªã b·∫Øt bu·ªôc
  return new AppError(err.message, 400);
};

const handleJsonWebTokenError = () => {
  logger.warn("Invalid token attempt!"); // Ghi log khi token kh√¥ng h·ª£p l·ªá
  return new AppError("Invalid token. Please log in again!", 401);
};

const handleTokenExpiredError = () => {
  logger.warn("Token expired!"); // Ghi log khi token h·∫øt h·∫°n
  return new AppError("Your token has expired! Please log in again", 401);
};

// H√†m x·ª≠ l√Ω l·ªói trong m√¥i tr∆∞·ªùng production
const sendErrorProd = (err: AppError, res: Response) => {
  if (err.isOperational) {
    // N·∫øu l·ªói l√† l·ªói do ng∆∞·ªùi d√πng (v√≠ d·ª•: l·ªói validation)
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
      errors: err.errors,
    });
  } else {
    // N·∫øu l·ªói l√† do h·ªá th·ªëng (v√≠ d·ª•: l·ªói server)
    logger.error(`ERROR üí•:`, err); // Log chi ti·∫øt l·ªói
    return res.status(500).json({
      status: "error",
      message: "Something went very wrong!", // Th√¥ng b√°o l·ªói chung cho ng∆∞·ªùi d√πng
    });
  }
};

// H√†m x·ª≠ l√Ω l·ªói trong m√¥i tr∆∞·ªùng development
const sendErrorDev = (err: AppError, res: Response) => {
  console.log("run");

  return res.status(err.statusCode).json({
    status: err.status,
    error: err, // Log chi ti·∫øt l·ªói
    message: err.message, // Th√¥ng b√°o l·ªói
    stack: err.stack, // Log stack trace (d√†nh cho developer)
  });
};

// Middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c
export default function GlobalError(
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
) {
  err.statusCode = err.statusCode || 500; // M·∫∑c ƒë·ªãnh m√£ l·ªói l√† 500 (server error) n·∫øu kh√¥ng c√≥ m√£ l·ªói
  err.status = err.status || "error"; // M·∫∑c ƒë·ªãnh tr·∫°ng th√°i l√† "error" n·∫øu kh√¥ng c√≥

  // Ki·ªÉm tra m√¥i tr∆∞·ªùng ƒë·ªÉ x√°c ƒë·ªãnh c√°ch x·ª≠ l√Ω l·ªói
  if (process.env.NODE_ENV?.trim() === "development") {
    // N·∫øu l√† m√¥i tr∆∞·ªùng development, g·ª≠i chi ti·∫øt l·ªói cho client
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV?.trim() === "production") {
    // N·∫øu l√† m√¥i tr∆∞·ªùng production, ki·ªÉm tra l·ªói l√† ZodError hay kh√¥ng v√† g·ª≠i th√¥ng b√°o l·ªói ph√π h·ª£p
    let error = { ...err, message: err.message };
    if (err.name === "ZodError") error = handleZodError(err); // X·ª≠ l√Ω l·ªói Zod n·∫øu c√≥
    if (err.code === "23505") error = handleError23505(err);
    if (err.code === "23502") error = handleError23502(err);
    if (err.name === "JsonWebTokenError") error = handleJsonWebTokenError();
    if (err.name === "TokenExpiredError") error = handleTokenExpiredError();

    sendErrorProd(error, res); // G·ª≠i l·ªói v·ªÅ client
  }
}
